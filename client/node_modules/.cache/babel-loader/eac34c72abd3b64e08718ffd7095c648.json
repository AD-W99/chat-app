{"ast":null,"code":"var _jsxFileName = \"/home/alexander/personal_projects/chat-app/client/src/Contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState, useCallback } from 'react';\nimport useLocalStorage from '../Hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider(_ref) {\n  _s2();\n\n  let {\n    id,\n    children\n  } = _ref;\n  const [conversations, setConversations] = useLocalStorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const addMessageToConversation = useCallback(_ref2 => {\n    let {\n      recipients,\n      text,\n      sender\n    } = _ref2;\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(convo => {\n        if (arrayEquality(convo.recipients, recipients)) {\n          madeChange = true;\n          return { ...convo,\n            messages: [...convo.messages, newMessage]\n          };\n        }\n\n        return convo;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          message: [newMessage]\n        }];\n      }\n    });\n  }, [setConversations]);\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on('receive-message', addMessageToConversation);\n    return () => socket.off('receive-message');\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((convo, index) => {\n    const recipients = convo.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = convo.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...convo,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationsProvider, \"CmF54rin1qzXcyIZFZ+UuxenltQ=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useCallback","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","convo","arrayEquality","message","on","off","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"sources":["/home/alexander/personal_projects/chat-app/client/src/Contexts/ConversationsProvider.js"],"sourcesContent":["import React, { useContext, useEffect, useState, useCallback } from 'react'\nimport useLocalStorage from '../Hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\nimport { useSocket } from './SocketProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n    const { contacts } = useContacts()\n    const socket = useSocket()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages: [] }]\n        })\n    }\n\n    const addMessageToConversation = useCallback(({ recipients, text, sender }) => {\n        setConversations(prevConversations => {\n            let madeChange = false\n            const newMessage = { sender, text }\n            const newConversations = prevConversations.map\n            (convo => {\n                if (arrayEquality(convo.recipients, recipients)) {\n                    madeChange = true\n                    return {\n                        ...convo,\n                        messages: [...convo.messages, newMessage]\n                    }\n                }\n\n                return convo\n            })\n\n            if (madeChange) {\n                return newConversations\n            } else {\n                return [\n                    ...prevConversations,\n                    { recipients, message: [newMessage] }\n                ]\n            }\n        })\n    }, [setConversations])\n\n    useEffect(() => {\n        if (socket == null) return\n\n        socket.on('receive-message', addMessageToConversation)\n\n        return () => socket.off('receive-message')\n    }, [socket, addMessageToConversation])\n\n    function sendMessage(recipients, text) {\n        socket.emit('send-message', {recipients, text})\n\n        addMessageToConversation({ recipients, text, sender: id })\n    }\n\n    const formattedConversations = conversations.map((convo, index) => {\n        const recipients = convo.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id === recipient\n            })\n        const name = (contact && contact.name) || recipient\n        return {id: recipient, name}\n        })\n\n        const messages = convo.messages.map(message => {\n            const contact = contacts.find(contact => {\n                return contact.id === message.sender\n            })\n        const name = (contact && contact.name) || message.sender\n        const fromMe = id === message.sender\n\n        return { ...message, senderName: name, fromMe }\n        })\n\n        const selected = index === selectedConversationIndex\n        return { ...convo, messages, recipients, selected }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n        {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nfunction arrayEquality(a, b) {\n    if (a.length !== b.length) return false\n\n    a.sort()\n    b.sort()\n\n    return a.every((element, index) => {\n        return element === b[index]\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}