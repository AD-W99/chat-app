{"ast":null,"code":"import _objectSpread from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alexander/personal_projects/chat-app/src/Contexts/ConversationsProvider.js\";\nimport React, { useContext, useState } from 'react';\nimport useLocalStorage from '../Hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nvar ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider(_ref) {\n  var id = _ref.id,\n      children = _ref.children;\n\n  var _useLocalStorage = useLocalStorage('conversations', []),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      conversations = _useLocalStorage2[0],\n      setConversations = _useLocalStorage2[1];\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedConversationIndex = _useState2[0],\n      setSelectedConversationIndex = _useState2[1];\n\n  var _useContacts = useContacts(),\n      contacts = _useContacts.contacts;\n\n  function createConversation(recipients) {\n    setConversations(function (prevConversations) {\n      return [].concat(_toConsumableArray(prevConversations), [{\n        recipients: recipients,\n        messages: []\n      }]);\n    });\n  }\n\n  function addMessageToConversation(_ref2) {\n    var recipients = _ref2.recipients,\n        text = _ref2.text,\n        sender = _ref2.sender;\n    setConversations(function (prevConversations) {\n      var madeChange = false;\n      var newMessage = {\n        sender: sender,\n        text: text\n      };\n      var newConversations = prevConversations.map(function (convo) {\n        if (arrayEquality(convo.recipients, recipients)) {\n          madeChange = true;\n          return _objectSpread({}, convo, {\n            messages: [].concat(_toConsumableArray(convo.messages), [newMessage])\n          });\n        }\n\n        return convo;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [].concat(_toConsumableArray(prevConversations), [{\n          recipients: recipients,\n          message: [newMessage]\n        }]);\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToConversation({\n      recipients: recipients,\n      text: text,\n      sender: id\n    });\n  }\n\n  var formattedConversations = conversations.map(function (convo, index) {\n    var recipients = convo.recipients.map(function (recipient) {\n      var contact = contacts.find(function (contact) {\n        return contact.id === recipient;\n      });\n      var name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name: name\n      };\n    });\n    var selected = index === selectedConversationIndex;\n    return _objectSpread({}, convo, {\n      recipients: recipients,\n      selected: selected\n    });\n  });\n  var value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage: sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation: createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, children);\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every(function (element, index) {\n    return element === b[index];\n  });\n}","map":{"version":3,"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","convo","arrayEquality","message","sendMessage","formattedConversations","index","recipient","contact","find","name","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"sources":["/home/alexander/personal_projects/chat-app/src/Contexts/ConversationsProvider.js"],"sourcesContent":["import React, { useContext, useState } from 'react'\nimport useLocalStorage from '../Hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ id, children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\n    const { contacts } = useContacts()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages: [] }]\n        })\n    }\n\n    function addMessageToConversation({ recipients, text, sender }) {\n        setConversations(prevConversations => {\n            let madeChange = false\n            const newMessage = { sender, text }\n            const newConversations = prevConversations.map\n            (convo => {\n                if (arrayEquality(convo.recipients, recipients)) {\n                    madeChange = true\n                    return {\n                        ...convo,\n                        messages: [...convo.messages, newMessage]\n                    }\n                }\n\n                return convo\n            })\n\n            if (madeChange) {\n                return newConversations\n            } else {\n                return [\n                    ...prevConversations,\n                    { recipients, message: [newMessage] }\n                ]\n            }\n        })\n    }\n\n    function sendMessage(recipients, text) {\n        addMessageToConversation({ recipients, text, sender: id })\n    }\n\n    const formattedConversations = conversations.map((convo, index) => {\n        const recipients = convo.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id === recipient\n            })\n        const name = (contact && contact.name) || recipient\n        return {id: recipient, name}\n        })\n        const selected = index === selectedConversationIndex\n        return { ...convo, recipients, selected }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        selectedConversation: formattedConversations[selectedConversationIndex],\n        sendMessage,\n        selectConversationIndex: setSelectedConversationIndex,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n        {children}\n        </ConversationsContext.Provider>\n    )\n}\n\nfunction arrayEquality(a, b) {\n    if (a.length !== b.length) return false\n\n    a.sort()\n    b.sort()\n\n    return a.every((element, index) => {\n        return element === b[index]\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}