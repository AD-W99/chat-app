{"ast":null,"code":"import _objectSpread from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/alexander/personal_projects/chat-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/alexander/personal_projects/chat-app/src/Contexts/ConversationsProvider.js\";\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../Hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nvar ConversationsContext = React.createContext();\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\nexport function ConversationsProvider(_ref) {\n  var children = _ref.children;\n\n  var _useLocalStorage = useLocalStorage('conversations', []),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      conversations = _useLocalStorage2[0],\n      setConversations = _useLocalStorage2[1];\n\n  var _useContacts = useContacts(),\n      contacts = _useContacts.contacts;\n\n  function createConversation(recipients) {\n    setConversations(function (prevConversations) {\n      return [].concat(_toConsumableArray(prevConversations), [{\n        recipients: recipients,\n        messages: []\n      }]);\n    });\n  }\n\n  var formattedConversations = conversations.map(function (convo) {\n    var recipients = convo.recipients.map(function (recipient) {\n      var contact = contacts.find(function (contact) {\n        return contact.id === recipient;\n      });\n      var name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name: name\n      };\n    });\n    return _objectSpread({}, convo, {\n      recipients: recipients\n    });\n  });\n  var value = {\n    conversations: formattedConversations,\n    createConversation: createConversation\n  };\n  return /*#__PURE__*/React.createElement(ConversationsContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, children);\n}","map":{"version":3,"names":["React","useContext","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","convo","recipient","contact","find","id","name","value"],"sources":["/home/alexander/personal_projects/chat-app/src/Contexts/ConversationsProvider.js"],"sourcesContent":["import React, { useContext } from 'react'\nimport useLocalStorage from '../Hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n    return useContext(ConversationsContext)\n}\n\nexport function ConversationsProvider({ children }) {\n    const [conversations, setConversations] = useLocalStorage('conversations', [])\n    const { contacts } = useContacts()\n\n    function createConversation(recipients) {\n        setConversations(prevConversations => {\n            return [...prevConversations, { recipients, messages: [] }]\n        })\n    }\n\n    const formattedConversations = conversations.map(convo => {\n        const recipients = convo.recipients.map(recipient => {\n            const contact = contacts.find(contact => {\n                return contact.id === recipient\n            })\n        const name = (contact && contact.name) || recipient\n        return {id: recipient, name}\n        })\n\n        return { ...convo, recipients }\n    })\n\n    const value = {\n        conversations: formattedConversations,\n        createConversation\n    }\n\n    return (\n        <ConversationsContext.Provider value={value}>\n        {children}\n        </ConversationsContext.Provider>\n    )\n}"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,IAAMC,oBAAoB,GAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;EAC/B,OAAOL,UAAU,CAACG,oBAAD,CAAjB;AACH;AAED,OAAO,SAASG,qBAAT,OAA6C;EAAA,IAAZC,QAAY,QAAZA,QAAY;;EAAA,uBACNN,eAAe,CAAC,eAAD,EAAkB,EAAlB,CADT;EAAA;EAAA,IACzCO,aADyC;EAAA,IAC1BC,gBAD0B;;EAAA,mBAE3BP,WAAW,EAFgB;EAAA,IAExCQ,QAFwC,gBAExCA,QAFwC;;EAIhD,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;IACpCH,gBAAgB,CAAC,UAAAI,iBAAiB,EAAI;MAClC,oCAAWA,iBAAX,IAA8B;QAAED,UAAU,EAAVA,UAAF;QAAcE,QAAQ,EAAE;MAAxB,CAA9B;IACH,CAFe,CAAhB;EAGH;;EAED,IAAMC,sBAAsB,GAAGP,aAAa,CAACQ,GAAd,CAAkB,UAAAC,KAAK,EAAI;IACtD,IAAML,UAAU,GAAGK,KAAK,CAACL,UAAN,CAAiBI,GAAjB,CAAqB,UAAAE,SAAS,EAAI;MACjD,IAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAc,UAAAD,OAAO,EAAI;QACrC,OAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;MACH,CAFe,CAAhB;MAGJ,IAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;MACA,OAAO;QAACG,EAAE,EAAEH,SAAL;QAAgBI,IAAI,EAAJA;MAAhB,CAAP;IACC,CANkB,CAAnB;IAQA,yBAAYL,KAAZ;MAAmBL,UAAU,EAAVA;IAAnB;EACH,CAV8B,CAA/B;EAYA,IAAMW,KAAK,GAAG;IACVf,aAAa,EAAEO,sBADL;IAEVJ,kBAAkB,EAAlBA;EAFU,CAAd;EAKA,oBACI,oBAAC,oBAAD,CAAsB,QAAtB;IAA+B,KAAK,EAAEY,KAAtC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACChB,QADD,CADJ;AAKH"},"metadata":{},"sourceType":"module"}